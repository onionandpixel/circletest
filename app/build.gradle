apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

//This would be the original dsl, though some settings works only in the task.
checkstyle {
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    toolVersion '6.15'

    configProperties.samedir = "${project.rootDir}/config/checkstyle/"

    showViolations = false
    ignoreFailures = false
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.example.circletest"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.example.circletest.CiEmulatorRunner"
    }
    buildTypes {
        debug{
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->

        deleteUnalignedFiles(variant)
    }
}



task checkStyle(type: Checkstyle) {
    configFile rootProject.file('config/checkstyle/checkstyle.xml')

    configProperties.samedir = "${project.rootDir}/config/checkstyle/"

    showViolations = false
    ignoreFailures = false
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    reports {
        html {
            destination "${rootDir}/app/build/reports/checkstyle/checkstyle.html"
        }
    }

    classpath = files()
}

task coverageReport(type: JacocoReport) {
    println("${projectDir}/src/main/java")
    def srcDir = "${projectDir}/src/main/java"
    sourceDirectories = files(srcDir)
    classDirectories = fileTree(
            dir: "${projectDir}/build/intermediates/classes/debug/com",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task packageArtifacts(type: Zip) {
    from "build/outputs/apk"
    baseName "circletest"
    version "0.1" + "." + System.getenv('CIRCLE_BUILD_NUM')
}


def deleteUnalignedFiles(variant) {
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                println "deleting " + file.getName()
                file.delete()
            }
        }
    }
}


task createTarball(type: Tar) {
    baseName = 'circletest'
    compression = Compression.GZIP
    from "build/outputs/apk"

}

//task obtainGoogleDriveTokens(type: by.dev.madhead.gbp.tasks.gdrive.ObtainGoogleDriveTokensTask) {
//    clientId = System.getenv("GDRIVE_CLIENT_ID")
//    clientSecret = System.getenv("GDRIVE_CLIENT_SECRET")
//}
//
//task deployGoogleDrive(type: by.dev.madhead.gbp.tasks.gdrive.GoogleDriveUploadTask) {
//    clientId = System.getenv('GDRIVE_CLIENT_ID')
//    clientSecret = System.getenv('GDRIVE_CLIENT_SECRET')
//    accessToken = System.getenv('GDRIVE_ACCESS_TOKEN')
//    refreshToken = System.getenv('GDRIVE_REFRESH_TOKEN')
//
//    dependsOn packageArtifacts                 // 1
//    mimeType = 'application/zip'         // 2
//    println(packageArtifacts.archivePath)
//    archive =  packageArtifacts.archivePath     // 3
//    path = ['CircleTest']           // 4
//    listenForUpload = true                  // 5
//}

//Add checkstyle as the first task.
project.afterEvaluate {
    preBuild.dependsOn checkStyle
    coverageReport.dependsOn testDebugUnitTest
	test.dependsOn coverageReport
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'

    testCompile 'junit:junit:4.12'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'junit:junit:4.12'
}
